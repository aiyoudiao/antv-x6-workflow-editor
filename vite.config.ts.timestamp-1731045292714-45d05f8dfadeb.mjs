// vite.config.ts
import { URL, fileURLToPath } from "node:url";
import process3 from "node:process";
import { defineConfig, loadEnv } from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/vite@5.4.8_@types+node@22.7.4_less@4.2.0_sass@1.79.4/node_modules/vite/dist/node/index.js";

// build/plugins/index.ts
import react from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/@vitejs+plugin-react@4.3.2_vite@5.4.8_@types+node@22.7.4_less@4.2.0_sass@1.79.4_/node_modules/@vitejs/plugin-react/dist/index.mjs";
import Inspect from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/vite-plugin-inspect@0.8.7_rollup@4.21.1_vite@5.4.8_@types+node@22.7.4_less@4.2.0_sass@1.79.4_/node_modules/vite-plugin-inspect/dist/index.mjs";
import removeConsole from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/vite-plugin-remove-console@2.2.0/node_modules/vite-plugin-remove-console/dist/index.mjs";

// build/plugins/auto-import.ts
import AutoImport from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/unplugin-auto-import@0.18.3_rollup@4.21.1_webpack-sources@3.2.3/node_modules/unplugin-auto-import/dist/vite.js";
import IconsResolver from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/unplugin-icons@0.19.3_@svgr+core@8.1.0_typescript@5.6.2_/node_modules/unplugin-icons/dist/resolver.js";
function setupAutoImport(viteEnv) {
  const { VITE_ICON_PREFIX, VITE_ICON_LOCAL_PREFIX } = viteEnv;
  const collectionName = VITE_ICON_LOCAL_PREFIX.replace(`${VITE_ICON_PREFIX}-`, "");
  return AutoImport({
    imports: ["react", "react-router-dom", "react-i18next", "ahooks", { from: "react", imports: ["FC"], type: true }],
    include: [/\.[tj]sx?$/],
    dirs: ["src/hooks/**", "src/components/**"],
    dts: "src/types/auto-imports.d.ts",
    resolvers: [
      IconsResolver({
        prefix: VITE_ICON_PREFIX,
        extension: "tsx",
        customCollections: [collectionName],
        componentPrefix: VITE_ICON_PREFIX
      }),
      autoImportAntd
    ]
  });
}
function autoImportAntd(componentName) {
  const pattern = /^A[A-Z]/;
  if (pattern.test(componentName)) {
    return { name: componentName.slice(1), from: "antd" };
  }
  return null;
}

// build/plugins/unocss.ts
import process from "node:process";
import path from "node:path";
import unocss from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/@unocss+vite@0.62.4_rollup@4.21.1_vite@5.4.8_@types+node@22.7.4_less@4.2.0_sass@1.79.4_/node_modules/@unocss/vite/dist/index.mjs";
import presetIcons from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/@unocss+preset-icons@0.62.4/node_modules/@unocss/preset-icons/dist/index.mjs";
import { FileSystemIconLoader } from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/@iconify+utils@2.1.33/node_modules/@iconify/utils/lib/loader/node-loaders.mjs";
function setupUnocss(viteEnv) {
  const { VITE_ICON_PREFIX, VITE_ICON_LOCAL_PREFIX } = viteEnv;
  const localIconPath = path.join(process.cwd(), "src/assets/svg-icon");
  const collectionName = VITE_ICON_LOCAL_PREFIX.replace(`${VITE_ICON_PREFIX}-`, "");
  return unocss({
    presets: [
      presetIcons({
        prefix: `${VITE_ICON_PREFIX}-`,
        scale: 1,
        extraProperties: {
          display: "inline-block"
        },
        collections: {
          [collectionName]: FileSystemIconLoader(
            localIconPath,
            (svg) => svg.replace(/^<svg\s/, '<svg width="1em" height="1em" ')
          )
        },
        warn: true
      })
    ]
  });
}

// build/plugins/unplugin-icon.ts
import path2 from "node:path";
import process2 from "node:process";
import { FileSystemIconLoader as FileSystemIconLoader2 } from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/unplugin-icons@0.19.3_@svgr+core@8.1.0_typescript@5.6.2_/node_modules/unplugin-icons/dist/loaders.js";
import Icons from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/unplugin-icons@0.19.3_@svgr+core@8.1.0_typescript@5.6.2_/node_modules/unplugin-icons/dist/vite.js";
import { createSvgIconsPlugin } from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/vite-plugin-svg-icons@2.0.1_vite@5.4.8_@types+node@22.7.4_less@4.2.0_sass@1.79.4_/node_modules/vite-plugin-svg-icons/dist/index.mjs";
function setupUnPluginIcon(viteEnv) {
  const { VITE_ICON_PREFIX, VITE_ICON_LOCAL_PREFIX } = viteEnv;
  const localIconPath = path2.join(process2.cwd(), "src/assets/svg-icon");
  const collectionName = VITE_ICON_LOCAL_PREFIX.replace(`${VITE_ICON_PREFIX}-`, "");
  const plugins = [
    createSvgIconsPlugin({
      iconDirs: [localIconPath],
      symbolId: `${VITE_ICON_LOCAL_PREFIX}-[dir]-[name]`,
      inject: "body-last",
      customDomId: "__SVG_ICON_LOCAL__"
    }),
    Icons({
      compiler: "jsx",
      customCollections: {
        [collectionName]: FileSystemIconLoader2(
          localIconPath,
          (svg) => svg.replace(/^<svg\s/, '<svg width="1em" height="1em" ')
        )
      },
      scale: 1,
      jsx: "react",
      defaultClass: "inline-block"
    })
  ];
  return plugins;
}

// build/plugins/router.ts
import ElegantReactRouter from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/@ohh-889+react-auto-route@0.3.5/node_modules/@ohh-889/react-auto-route/dist/vite.mjs";
function setupElegantRouter() {
  return ElegantReactRouter({
    layouts: {
      base: "src/layouts/base-layout/index.tsx",
      blank: "src/layouts/blank-layout/index.tsx"
    },
    log: false,
    customRoutes: {
      names: [
        "exception_403",
        "exception_404",
        "exception_500",
        "document_project",
        "document_project-link",
        "document_react",
        "document_vite",
        "document_unocss",
        "document_proComponents",
        "document_antd",
        "logout"
      ]
    },
    onRouteMetaGen(routeName) {
      const key = routeName;
      const constantRoutes = ["login", "403", "404", "500"];
      const meta = {
        title: key,
        i18nKey: `route.${key}`
      };
      if (constantRoutes.includes(key)) {
        meta.constant = true;
      }
      return meta;
    }
  });
}

// build/plugins/html.ts
function setupHtmlPlugin(buildTime) {
  const plugin = {
    name: "html-plugin",
    apply: "build",
    transformIndexHtml(html) {
      return html.replace("<head>", `<head>
    <meta name="buildTime" content="${buildTime}">`);
    }
  };
  return plugin;
}

// build/plugins/info.ts
import gradientString from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/gradient-string@3.0.0/node_modules/gradient-string/dist/index.js";
import boxen from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/boxen@8.0.1/node_modules/boxen/index.js";
var welcomeMessage = gradientString("#646cff", "magenta").multiline(
  `\u60A8\u597D! \u6B22\u8FCE\u4F7F\u7528 react-soybean \u5F00\u6E90\u9879\u76EE
\u6211\u4EEC\u4E3A\u60A8\u7CBE\u5FC3\u51C6\u5907\u4E86\u7CBE\u7F8E\u7684\u4FDD\u59C6\u7EA7\u6587\u6863
https://react-soybean-docs.pages.dev/index-cn?theme=dark`
);
var boxenOptions = {
  padding: 0.5,
  borderColor: "#646cff",
  borderStyle: "round"
};
function setupProjectInfo() {
  return {
    name: "vite:buildInfo",
    buildStart() {
      console.log(boxen(welcomeMessage, boxenOptions));
    }
  };
}

// build/plugins/index.ts
function setupVitePlugins(viteEnv, buildTime) {
  const plugins = [
    react(),
    setupAutoImport(viteEnv),
    setupUnocss(viteEnv),
    ...setupUnPluginIcon(viteEnv),
    setupElegantRouter(),
    Inspect(),
    removeConsole(),
    setupHtmlPlugin(buildTime),
    setupProjectInfo()
  ];
  return plugins;
}

// src/utils/service.ts
import json5 from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/json5@2.2.3/node_modules/json5/lib/index.js";
function createServiceConfig(env) {
  const { VITE_SERVICE_BASE_URL, VITE_OTHER_SERVICE_BASE_URL } = env;
  let other = {};
  try {
    other = json5.parse(VITE_OTHER_SERVICE_BASE_URL);
  } catch {
    console.error("VITE_OTHER_SERVICE_BASE_URL is not a valid json5 string");
  }
  const httpConfig = {
    baseURL: VITE_SERVICE_BASE_URL,
    other
  };
  const otherHttpKeys = Object.keys(httpConfig.other);
  const otherConfig = otherHttpKeys.map((key) => {
    return {
      key,
      baseURL: httpConfig.other[key],
      proxyPattern: createProxyPattern(key)
    };
  });
  const config = {
    baseURL: httpConfig.baseURL,
    proxyPattern: createProxyPattern(),
    other: otherConfig
  };
  return config;
}
function createProxyPattern(key) {
  if (!key) {
    return "/proxy-default";
  }
  return `/proxy-${key}`;
}

// build/config/proxy.ts
function createViteProxy(env, enable) {
  const isEnableHttpProxy = enable && env.VITE_HTTP_PROXY === "Y";
  if (!isEnableHttpProxy) return void 0;
  const { baseURL, proxyPattern, other } = createServiceConfig(env);
  const proxy = createProxyItem({ baseURL, proxyPattern });
  other.forEach((item) => {
    Object.assign(proxy, createProxyItem(item));
  });
  return proxy;
}
function createProxyItem(item) {
  const proxy = {};
  proxy[item.proxyPattern] = {
    target: item.baseURL,
    changeOrigin: true,
    rewrite: (path3) => path3.replace(new RegExp(`^${item.proxyPattern}`), "")
  };
  return proxy;
}

// build/config/time.ts
import dayjs from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/dayjs.min.js";
import utc from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/utc.js";
import timezone from "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/node_modules/.pnpm/dayjs@1.11.13/node_modules/dayjs/plugin/timezone.js";
function getBuildTime() {
  dayjs.extend(utc);
  dayjs.extend(timezone);
  const buildTime = dayjs.tz(Date.now(), "Asia/Shanghai").format("YYYY-MM-DD HH:mm:ss");
  return buildTime;
}

// build/optimize/index.ts
var include = ["ahooks", "echarts", "i18next", "lodash", "immer", "react-i18next"];

// vite.config.ts
var __vite_injected_original_import_meta_url = "file:///E:/Code/work/shared/workflow/antv-x6-workflow-editor/vite.config.ts";
var vite_config_default = defineConfig((configEnv) => {
  const viteEnv = loadEnv(configEnv.mode, process3.cwd());
  const buildTime = getBuildTime();
  const enableProxy = configEnv.command === "serve" && !configEnv.isPreview;
  return {
    base: viteEnv.VITE_BASE_URL,
    resolve: {
      alias: {
        "~": fileURLToPath(new URL("./", __vite_injected_original_import_meta_url)),
        "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
      }
    },
    optimizeDeps: { include },
    css: {
      preprocessorOptions: {
        scss: {
          api: "modern-compiler",
          additionalData: `@use "@/styles/scss/global.scss" as *;`
        }
      }
    },
    plugins: setupVitePlugins(viteEnv, buildTime),
    define: {
      BUILD_TIME: JSON.stringify(buildTime)
    },
    server: {
      host: "0.0.0.0",
      port: 9527,
      open: true,
      warmup: {
        clientFiles: ["./index.html", "./src/{pages,components}/*"]
      },
      proxy: createViteProxy(viteEnv, enableProxy),
      fs: {
        cachedChecks: false
      }
    },
    preview: {
      port: 9725
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
